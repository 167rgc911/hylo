type A {}

type A0 = A
type A1 = A0
type A2 = X          // #!error no type named 'X' in scope

type B {
  type BB {
    type BBB {}
  }
}

type B0 = B.BB
type B1 = B.BB.BBB
type B2 = B0
type B3 = B0.BBB
type B4 = B2.BBB

type B5 = B0.X        // #!error type 'BB' has no member type named 'X'
type B6 = B1.X        // #!error type 'BBB' has no member type named 'X'
type B7 = B2.X        // #!error type 'BB' has no member type named 'X'
type B8 = B3.X        // #!error type 'BBB' has no member type named 'X'
type B9 = B4.X        // #!error type 'BBB' has no member type named 'X'

type C {
  type CC0 {}
  type CC1 = CC2
}
extension C {
  type CC2 = CC0
}

type C0 = C.CC0.X     // #!error type 'CC0' has no member type named 'X'
type C1 = C.CC1.X     // #!error type 'CC0' has no member type named 'X'
type C1 = C.CC2.X     // #!error type 'CC0' has no member type named 'X'

type D {
  let foo: D.DD1
  let bar: D.DD2      // #!error type 'D' has no member type named 'DD2'
  type DD0 = D
}
type D0 = D.DD0
extension D0 {
  type DD1 {}
}

type E {
  type EE = Self
}

type E0 = E.EE
type E1 = E.EE.X      // #!error type 'E' has no member type named 'X'
