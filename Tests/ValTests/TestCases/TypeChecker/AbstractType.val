view V {
  type X

  new(any: Any)
  fun foo(x: X) -> X
  fun bar(one: X, two: X) -> (one: X, two: X)
}

view U {
  type Y: V

  fun ham(y: Y, u: Self)
}

fun f0<X where X: V>(a: X, b: X::X) -> X::X {
  return a.foo(x: b)
}

fun f1<X where X: U>(a: X, b: X::Y, c: X::Y::X) -> X::Y::X {
  a.ham(y: b, u: a)
  return b.foo(x: c)
}

// #!error@+1 type 'X' has no member type named 'Y'
fun f2<X where X: V>(a: X::Y) {}

fun f3<X, Y where X: V, Y: V>(a: mut X::X, b: Y::X) {
  // #!error@+1 type '$Y::X' is not a subtype of type '$X::X'
  a = b
}

// #!error@+1 conformance to 'V' requires a matching implementation of 'X'
type A: V {
}

// #!error@+2 conformance to 'V' requires a matching implementation of 'new'
// #!error@+1 conformance to 'V' requires a matching implementation of 'bar'
type B<X>: V {
  fun foo(x: X) -> X { return x }
  fun bar(one: X) -> X { return one }
}

type C: V {
  type X {}

  new(any: Any) {}
  fun foo(x: X) -> X { return x }
  fun bar(one: X, two: X) -> (one: X, two: X) { return (one: one, two: two) }
}

// #!error@+1 conformance to 'U' requires a matching implementation of 'Y'
type D: U {
}

// #!error@+1 type '$Y' does not conform to view 'V'
type E<Y>: U {
  fun ham(y: Y, u: E<Y>) {
  }
}

type F<Y where Y: V>: U {
  let x: Y::X

  fun ham(y: Y, u: F<Y>) {
    y.foo(x: x)
  }
}

type G: U {
  type Y = C

  fun ham(y: Y, u: G) {
    y.foo(x: C::X())
  }
}
