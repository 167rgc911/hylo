type A {}

type B<T> {

  var property: T

  fun fn<U>(x: T, y: U) {
    fn(x: property, y: A())

    // #!error@+1 type '$U' is not a subtype of type '$T'
    fn(x: y, y: A())
  }

}

view V {
  let foo: V
}

view U {}

fun fn<X>(x: X) {
  // #!error@+1 view conformance requirement on non-generic type 'Y'
  fun g<Y where Y == X, Y: V>(y: Y) -> V {
    return y.foo
  }

  fun h<X, Y where Y == X, Y: V>(y: Y) -> V {
    return y.foo
  }

  fun i<X where X: U>(x: X) {
    fun id<Y where Y: V>(x: X, y: Y) -> V {
      var a: X = x

      // #!error@+2 type '$Y' is not a subtype of type '$X'
      // #!error@+1 type '$X' does not conform to view 'V'
      return id(x: y, y: a)
    }
  }
}
