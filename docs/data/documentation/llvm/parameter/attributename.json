{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AttributeName"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/llvm\/parameter\/attributename"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/LLVM\/documentation\/LLVM\/AttributeNameProtocol","doc:\/\/LLVM\/SQ","doc:\/\/LLVM\/SH","doc:\/\/LLVM\/SY"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The name of an attribute on a parameter in LLVM IR."}],"kind":"symbol","metadata":{"navigatorTitle":[{"kind":"identifier","text":"AttributeName"}],"role":"symbol","title":"Parameter.AttributeName","roleHeading":"Enumeration","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AttributeName"}],"symbolKind":"enum","externalID":"s:4LLVM9ParameterV13AttributeNameO","extendedModule":"LLVM","modules":[{"name":"LLVM"}]},"hierarchy":{"paths":[["doc:\/\/LLVM\/documentation\/LLVM","doc:\/\/LLVM\/documentation\/LLVM\/Parameter","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeHolder-Implementations"]]},"topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/align","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/alignstack","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/allocalign","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/allocptr","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/dereferenceable","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/dereferenceable_or_null","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/immarg","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/inreg","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/noalias","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/nocapture","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/nofree","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/nonnull","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/noundef","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/readnone","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/readonly","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/returned","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/signext","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/writeonly","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/zeroext"]},{"title":"Initializers","identifiers":["doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/init(rawValue:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/Equatable-Implementations","doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/RawRepresentable-Implementations"],"generated":true}],"references":{"doc://LLVM/documentation/LLVM/Parameter/AttributeName/readnone":{"role":"symbol","title":"Parameter.AttributeName.readnone","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"readnone"}],"abstract":[{"type":"text","text":"Indicates that the function does not dereference that pointer argument, even though it may"},{"type":"text","text":" "},{"type":"text","text":"read or write the memory that the pointer points to if accessed through other pointers."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/readnone","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/readnone"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/signext":{"role":"symbol","title":"Parameter.AttributeName.signext","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"signext"}],"abstract":[{"type":"text","text":"Indicates to the code generator that the parameter or return value should be sign-extended"},{"type":"text","text":" "},{"type":"text","text":"to the extent required by the target’s ABI (which is usually 32-bits) by the caller (for a"},{"type":"text","text":" "},{"type":"text","text":"parameter) or the callee (for a return value)."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/signext","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/signext"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/dereferenceable_or_null":{"role":"symbol","title":"Parameter.AttributeName.dereferenceable_or_null","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dereferenceable_or_null"}],"abstract":[{"type":"text","text":"Indicates that the parameter or return value isn’t both non-null and non-dereferenceable"},{"type":"text","text":" "},{"type":"text","text":"(up to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" bytes) at the same time."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/dereferenceable_or_null","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/dereferenceable_or_null"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/noundef":{"role":"symbol","title":"Parameter.AttributeName.noundef","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"noundef"}],"abstract":[{"type":"text","text":"Indicates that the parameter or return value is not undefined."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/noundef","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/noundef"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/nofree":{"role":"symbol","title":"Parameter.AttributeName.nofree","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"nofree"}],"abstract":[{"type":"text","text":"Indicates that callee does not free the pointer argument."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/nofree","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/nofree"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/readonly":{"role":"symbol","title":"Parameter.AttributeName.readonly","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"readonly"}],"abstract":[{"type":"text","text":"Indicates that the function does not write through this pointer argument, even though it"},{"type":"text","text":" "},{"type":"text","text":"may write to the memory that the pointer points to."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/readonly","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/readonly"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/inreg":{"role":"symbol","title":"Parameter.AttributeName.inreg","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"inreg"}],"abstract":[{"type":"text","text":"Indicates that this parameter or return value should be treated in a special"},{"type":"text","text":" "},{"type":"text","text":"target-dependent fashion while emitting code for a function call or return (usually, by"},{"type":"text","text":" "},{"type":"text","text":"putting it in a register as opposed to memory, though some targets use it to distinguish"},{"type":"text","text":" "},{"type":"text","text":"between two different kinds of registers). Use of this attribute is target-specific."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/inreg","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/inreg"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/noalias":{"role":"symbol","title":"Parameter.AttributeName.noalias","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"noalias"}],"abstract":[{"type":"text","text":"Indicates that memory locations accessed via pointer values based on the argument or return"},{"type":"text","text":" "},{"type":"text","text":"value are not also accessed, during the execution of the function, via pointer values not"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"based"}]},{"type":"text","text":" on the argument or return value."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/noalias","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/noalias"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/zeroext":{"role":"symbol","title":"Parameter.AttributeName.zeroext","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"zeroext"}],"abstract":[{"type":"text","text":"Indicates to the code generator that the parameter or return value should be zero-extended"},{"type":"text","text":" "},{"type":"text","text":"to the extent required by the target’s ABI by the caller (for a parameter) or the callee"},{"type":"text","text":" "},{"type":"text","text":"(for a return value)."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/zeroext","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/zeroext"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/equatable-implementations"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/alignstack":{"role":"symbol","title":"Parameter.AttributeName.alignstack","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"alignstack"}],"abstract":[{"type":"text","text":"Indicates that the alignment that should be considered by the backend when assigning this"},{"type":"text","text":" "},{"type":"text","text":"parameter to a stack slot during calling convention lowering"}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/alignstack","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/alignstack"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/align":{"role":"symbol","title":"Parameter.AttributeName.align","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"align"}],"abstract":[{"type":"text","text":"Indicates that the pointer value or vector of pointers has the specified alignment."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/align","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/align"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/allocalign":{"role":"symbol","title":"Parameter.AttributeName.allocalign","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"allocalign"}],"abstract":[{"type":"text","text":"Indicates that the function parameter marked with this attribute is is the alignment in"},{"type":"text","text":" "},{"type":"text","text":"bytes of the newly allocated block returned by this function."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/allocalign","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/allocalign"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/RawRepresentable-Implementations":{"role":"collectionGroup","title":"RawRepresentable Implementations","abstract":[],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/RawRepresentable-Implementations","kind":"article","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/rawrepresentable-implementations"},"doc://LLVM/documentation/LLVM":{"role":"collection","title":"LLVM","abstract":[],"identifier":"doc:\/\/LLVM\/documentation\/LLVM","kind":"symbol","type":"topic","url":"\/documentation\/llvm"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/immarg":{"role":"symbol","title":"Parameter.AttributeName.immarg","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"immarg"}],"abstract":[{"type":"text","text":"Indicates that the parameter is required to be an immediate value."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/immarg","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/immarg"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/allocptr":{"role":"symbol","title":"Parameter.AttributeName.allocptr","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"allocptr"}],"abstract":[{"type":"text","text":"Indicates that the function parameter marked with this attribute is the pointer that will"},{"type":"text","text":" "},{"type":"text","text":"be manipulated by the allocator."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/allocptr","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/allocptr"},"doc://LLVM/documentation/LLVM/Parameter/AttributeHolder-Implementations":{"role":"collectionGroup","title":"AttributeHolder Implementations","abstract":[],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeHolder-Implementations","kind":"article","type":"topic","url":"\/documentation\/llvm\/parameter\/attributeholder-implementations"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/writeonly":{"role":"symbol","title":"Parameter.AttributeName.writeonly","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeonly"}],"abstract":[{"type":"text","text":"Indicates that the function may write to, but does not read through this pointer argument"},{"type":"text","text":" "},{"type":"text","text":"(even though it may read from the memory that the pointer points to)."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/writeonly","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/writeonly"},"doc://LLVM/SY":{"type":"unresolvable","title":"Swift.RawRepresentable","identifier":"doc:\/\/LLVM\/SY"},"doc://LLVM/documentation/LLVM/Parameter":{"role":"symbol","title":"Parameter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parameter"}],"abstract":[{"type":"text","text":"A parameter in a LLVM IR function."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parameter"}],"url":"\/documentation\/llvm\/parameter"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/init(rawValue:)":{"role":"symbol","title":"init(rawValue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"rawValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/init(rawValue:)","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/init(rawvalue:)"},"doc://LLVM/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/LLVM\/SH"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/dereferenceable":{"role":"symbol","title":"Parameter.AttributeName.dereferenceable","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dereferenceable"}],"abstract":[{"type":"text","text":"Indicates that the parameter or return pointer is dereferenceable."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/dereferenceable","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/dereferenceable"},"doc://LLVM/documentation/LLVM/AttributeNameProtocol":{"role":"symbol","title":"AttributeNameProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AttributeNameProtocol"}],"abstract":[{"type":"text","text":"A target-independent attribute name."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/AttributeNameProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AttributeNameProtocol"}],"url":"\/documentation\/llvm\/attributenameprotocol"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/nocapture":{"role":"symbol","title":"Parameter.AttributeName.nocapture","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"nocapture"}],"abstract":[{"type":"text","text":"Indicates that the callee does not capture the pointer. This is not a valid attribute for"},{"type":"text","text":" "},{"type":"text","text":"return values."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/nocapture","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/nocapture"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName":{"role":"symbol","title":"Parameter.AttributeName","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AttributeName"}],"abstract":[{"type":"text","text":"The name of an attribute on a parameter in LLVM IR."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AttributeName"}],"url":"\/documentation\/llvm\/parameter\/attributename"},"doc://LLVM/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/LLVM\/SQ"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/nonnull":{"role":"symbol","title":"Parameter.AttributeName.nonnull","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"nonnull"}],"abstract":[{"type":"text","text":"Indicates that the parameter or return pointer is not null. This attribute may only be"},{"type":"text","text":" "},{"type":"text","text":"applied to pointer typed parameters"}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/nonnull","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/nonnull"},"doc://LLVM/documentation/LLVM/Parameter/AttributeName/returned":{"role":"symbol","title":"Parameter.AttributeName.returned","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"returned"}],"abstract":[{"type":"text","text":"Indicates that the function always returns the argument as its return value."}],"identifier":"doc:\/\/LLVM\/documentation\/LLVM\/Parameter\/AttributeName\/returned","kind":"symbol","type":"topic","url":"\/documentation\/llvm\/parameter\/attributename\/returned"}}}