{"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/aggregateconstant\/count","title":"var count: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/aggregateconstant\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/aggregateconstant\/subscript(_:)","title":"subscript(Int) -> IRValue","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/aggregateconstant\/index(before:)","title":"func index(before: Int) -> Int","type":"method"}],"path":"\/documentation\/llvm\/aggregateconstant\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/aggregateconstant\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/llvm\/aggregateconstant\/startindex","title":"var startIndex: Int","type":"property"}],"path":"\/documentation\/llvm\/aggregateconstant\/collection-implementations","title":"Collection Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/aggregateconstant","title":"AggregateConstant","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/llvm\/attributeholder\/attributename","title":"AttributeName","type":"associatedtype"}],"path":"\/documentation\/llvm\/attributeholder","title":"AttributeHolder","type":"protocol"},{"path":"\/documentation\/llvm\/attributenameprotocol","title":"AttributeNameProtocol","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/global\/linkage","title":"var linkage: Linkage","type":"property"},{"path":"\/documentation\/llvm\/global\/valuetype","title":"var valueType: IRType","type":"property"}],"path":"\/documentation\/llvm\/global","title":"Global","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/irtype\/!=(_:_:)-4gsc2","title":"static func != (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/irtype\/!=(_:_:)-7p6zi","title":"static func != (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/irtype\/==(_:_:)-466xb","title":"static func == (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/irtype\/==(_:_:)-9g6mm","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/irtype\/==(_:_:)-9irju","title":"static func == (IRType, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/irtype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/irtype\/issized","title":"var isSized: Bool","type":"property"},{"path":"\/documentation\/llvm\/irtype\/llvm","title":"var llvm: LLVMTypeRef","type":"property"},{"path":"\/documentation\/llvm\/irtype\/null","title":"var null: IRValue","type":"property"}],"path":"\/documentation\/llvm\/irtype","title":"IRType","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/irvalue\/!=(_:_:)-2olw1","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/irvalue\/!=(_:_:)-9dlwi","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/irvalue\/==(_:_:)-1iih2","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/irvalue\/==(_:_:)-9cwhi","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/irvalue\/==(_:_:)-hapv","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/irvalue\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/irvalue\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/irvalue\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/irvalue\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/irvalue\/llvm","title":"var llvm: LLVMValueRef","type":"property"},{"path":"\/documentation\/llvm\/irvalue\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/irvalue\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/irvalue","title":"IRValue","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/addressspace\/llvm","title":"let llvm: UInt32","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/addressspace\/default","title":"static var `default`: AddressSpace","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/addressspace\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/addressspace\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/addressspace","title":"AddressSpace","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/alloca\/init(_:)","title":"init?(IRValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/alloca\/alignment","title":"var alignment: Int","type":"property"},{"path":"\/documentation\/llvm\/alloca\/allocatedtype","title":"var allocatedType: IRType","type":"property"},{"path":"\/documentation\/llvm\/alloca\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/alloca\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/alloca\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/alloca\/!=(_:_:)-2q9b0","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/alloca\/!=(_:_:)-9bxk1","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/alloca\/==(_:_:)-4trq9","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/alloca\/==(_:_:)-4yme","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/alloca\/==(_:_:)-9gcyc","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/alloca\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/alloca\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/alloca\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/alloca\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/alloca\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/alloca\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/alloca\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/alloca","title":"Alloca","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/init(bytes:in:)","title":"init<S>(bytes: S, in: inout Module)","type":"init"},{"path":"\/documentation\/llvm\/arrayconstant\/init(of:containing:in:)","title":"init<S>(of: IRType, containing: S, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/count-6hwbh","title":"let count: Int","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/subscript(_:)-9myzo","title":"subscript(Int) -> IRValue","type":"subscript"}],"path":"\/documentation\/llvm\/arrayconstant\/aggregateconstant-implementations","title":"AggregateConstant Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/flatmapoffsets(_:)","title":"func flatmapOffsets(Offsets?) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/mapoffsets(_:)","title":"func mapOffsets(Offsets) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/llvm\/arrayconstant\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/count-3njlz","title":"var count: Int","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/underestimatedcount-2iop","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/convertbyoffset(_:in:)-54928","title":"func convertByOffset<C>(Range<Self.Index>, in: C) -> Range<C.Index>","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/convertbyoffset(_:in:)-9ofe8","title":"func convertByOffset<C>(Self.Index, in: C) -> C.Index","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/index(atoffset:)","title":"func index(atOffset: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/map(_:)-1smo2","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/offset(of:)","title":"func offset(of: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/offset(ofindex:)","title":"func offset(ofIndex: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/offsets(of:)","title":"func offsets(of: Range<Self.Index>) -> Range<Int>","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/split(around:)","title":"func split(around: Range<Self.Index>) -> (prefix: Self.SubSequence, Self.SubSequence, suffix: Self.SubSequence)","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/subscript(_:)-3br1f","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/llvm\/arrayconstant\/subscript(_:)-803hm","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/llvm\/arrayconstant\/subscript(_:)-9cn1e","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/index","title":"ArrayConstant.Index","type":"typealias"}],"path":"\/documentation\/llvm\/arrayconstant\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/arrayconstant\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/!=(_:_:)-6wz4y","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/arrayconstant\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/!=(_:_:)-2msuk","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/arrayconstant\/!=(_:_:)-zpuj","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/arrayconstant\/==(_:_:)-1kblv","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/arrayconstant\/==(_:_:)-3qgmp","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/arrayconstant\/==(_:_:)-8ld8h","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/arrayconstant\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/llvm\/arrayconstant\/underestimatedcount-7umyt","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/all(_:)","title":"func all((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/any(_:)","title":"func any((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/flatmap(_:)-40il8","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/flatmap(_:)-57odc","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/map(_:)-4ma9v","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/none(_:)","title":"func none((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/sorted(using:)-2uxog","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/sorted(using:)-79jlc","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/arrayconstant\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/arrayconstant\/element","title":"ArrayConstant.Element","type":"typealias"}],"path":"\/documentation\/llvm\/arrayconstant\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/arrayconstant","title":"ArrayConstant","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/arraytype\/init(_:)","title":"init?(IRType)","type":"init"},{"path":"\/documentation\/llvm\/arraytype\/init(_:_:in:)","title":"init(Int, IRType, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arraytype\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/llvm\/arraytype\/element","title":"var element: IRType","type":"property"},{"path":"\/documentation\/llvm\/arraytype\/llvm","title":"let llvm: LLVMTypeRef","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/arraytype\/constant(contentsof:in:)","title":"func constant<S>(contentsOf: S, in: inout Module) -> ArrayConstant","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arraytype\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/arraytype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/arraytype\/!=(_:_:)-1sk3w","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/arraytype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/arraytype\/!=(_:_:)-1plxd","title":"static func != (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/arraytype\/!=(_:_:)-2gbdk","title":"static func != (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/arraytype\/==(_:_:)-127jz","title":"static func == (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/arraytype\/==(_:_:)-9yb85","title":"static func == (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/arraytype\/==(_:_:)-gp0i","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/arraytype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/arraytype\/issized","title":"var isSized: Bool","type":"property"},{"path":"\/documentation\/llvm\/arraytype\/null","title":"var null: IRValue","type":"property"}],"path":"\/documentation\/llvm\/arraytype\/irtype-implementations","title":"IRType Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/arraytype","title":"ArrayType","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/basicblock\/llvm","title":"let llvm: LLVMBasicBlockRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/basicblock\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/basicblock\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/basicblock\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/basicblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/basicblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/basicblock","title":"BasicBlock","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/datalayout\/init(of:)","title":"init(of: TargetMachine)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/datalayout\/abialignment(of:)","title":"func abiAlignment(of: IRType) -> Int","type":"method"},{"path":"\/documentation\/llvm\/datalayout\/bitwidth(of:)","title":"func bitWidth(of: IRType) -> Int","type":"method"},{"path":"\/documentation\/llvm\/datalayout\/index(at:in:)","title":"func index(at: Int, in: StructType) -> Int","type":"method"},{"path":"\/documentation\/llvm\/datalayout\/offset(of:in:)","title":"func offset(of: Int, in: StructType) -> Int","type":"method"},{"path":"\/documentation\/llvm\/datalayout\/preferredalignment(of:)","title":"func preferredAlignment(of: IRType) -> Int","type":"method"},{"path":"\/documentation\/llvm\/datalayout\/storagesize(of:)","title":"func storageSize(of: IRType) -> Int","type":"method"},{"path":"\/documentation\/llvm\/datalayout\/storagestride(of:)","title":"func storageStride(of: IRType) -> Int","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/datalayout\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/datalayout\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/datalayout\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/datalayout\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/datalayout\/==(_:_:)","title":"static func == (DataLayout, DataLayout) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/datalayout\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/datalayout\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/llvm\/datalayout\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/datalayout","title":"DataLayout","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointconstant\/init(_:)","title":"init?(IRValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointconstant\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"path":"\/documentation\/llvm\/floatingpointconstant\/value","title":"var value: (value: Double, lostPrecision: Bool)","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointconstant\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/floatingpointconstant\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointconstant\/!=(_:_:)-6jcov","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/floatingpointconstant\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointconstant\/!=(_:_:)-77f2q","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/floatingpointconstant\/!=(_:_:)-83nop","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/floatingpointconstant\/==(_:_:)-1u9j2","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/floatingpointconstant\/==(_:_:)-49qna","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/floatingpointconstant\/==(_:_:)-9q49s","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointconstant\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/floatingpointconstant\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/floatingpointconstant\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/floatingpointconstant\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/floatingpointconstant\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/floatingpointconstant\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/floatingpointconstant\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/floatingpointconstant","title":"FloatingPointConstant","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointtype\/init(_:)","title":"init?(IRType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointtype\/llvm","title":"let llvm: LLVMTypeRef","type":"property"},{"path":"\/documentation\/llvm\/floatingpointtype\/zero","title":"var zero: FloatingPointConstant","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointtype\/callasfunction(_:)","title":"func callAsFunction(Double) -> FloatingPointConstant","type":"method"},{"path":"\/documentation\/llvm\/floatingpointtype\/constant(_:)","title":"func constant(Double) -> FloatingPointConstant","type":"method"},{"path":"\/documentation\/llvm\/floatingpointtype\/constant(parsing:)","title":"func constant(parsing: String) -> FloatingPointConstant","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointtype\/double(in:)","title":"static func double(in: inout Module) -> FloatingPointType","type":"method"},{"path":"\/documentation\/llvm\/floatingpointtype\/float(in:)","title":"static func float(in: inout Module) -> FloatingPointType","type":"method"},{"path":"\/documentation\/llvm\/floatingpointtype\/fp128(in:)","title":"static func fp128(in: inout Module) -> FloatingPointType","type":"method"},{"path":"\/documentation\/llvm\/floatingpointtype\/half(in:)","title":"static func half(in: inout Module) -> FloatingPointType","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointtype\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/floatingpointtype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointtype\/!=(_:_:)-658k5","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/floatingpointtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointtype\/!=(_:_:)-2ctmp","title":"static func != (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/floatingpointtype\/!=(_:_:)-94gxi","title":"static func != (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/floatingpointtype\/==(_:_:)-76fbl","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/floatingpointtype\/==(_:_:)-9hj2p","title":"static func == (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/floatingpointtype\/==(_:_:)-9pw73","title":"static func == (Self, IRType) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointtype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/floatingpointtype\/issized","title":"var isSized: Bool","type":"property"},{"path":"\/documentation\/llvm\/floatingpointtype\/null","title":"var null: IRValue","type":"property"}],"path":"\/documentation\/llvm\/floatingpointtype\/irtype-implementations","title":"IRType Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/floatingpointtype","title":"FloatingPointType","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/count-2i8jf","title":"var count: Int","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/subscript(_:)-5vdai","title":"subscript(Int) -> Parameter","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/element","title":"Function.Parameters.Element","type":"typealias"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/index","title":"Function.Parameters.Index","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/flatmapoffsets(_:)","title":"func flatmapOffsets(Offsets?) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/mapoffsets(_:)","title":"func mapOffsets(Offsets) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/count-4wvtz","title":"var count: Int","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/underestimatedcount-6r9do","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/convertbyoffset(_:in:)-2q443","title":"func convertByOffset<C>(Self.Index, in: C) -> C.Index","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/convertbyoffset(_:in:)-2z17c","title":"func convertByOffset<C>(Range<Self.Index>, in: C) -> Range<C.Index>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/index(atoffset:)","title":"func index(atOffset: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/map(_:)-7xaqp","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/offset(of:)","title":"func offset(of: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/offset(ofindex:)","title":"func offset(ofIndex: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/offsets(of:)","title":"func offsets(of: Range<Self.Index>) -> Range<Int>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/split(around:)","title":"func split(around: Range<Self.Index>) -> (prefix: Self.SubSequence, Self.SubSequence, suffix: Self.SubSequence)","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/trydropprefix(_:)","title":"func tryDropPrefix<C>(C) -> Self.SubSequence?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/trydropsuffix(_:)","title":"func tryDropSuffix<C>(C) -> Self.SubSequence?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/subscript(_:)-41k9z","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/subscript(_:)-4rd7w","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/subscript(_:)-69334","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/underestimatedcount-s3zj","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/all(_:)","title":"func all((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/any(_:)","title":"func any((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/flatmap(_:)-4hj0q","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/flatmap(_:)-7hns3","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/map(_:)-5q9zq","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/none(_:)","title":"func none((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/sorted(using:)-4tq7l","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/sorted(using:)-8583y","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/llvm\/function\/parameters-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/function\/parameters-swift.struct","title":"Function.Parameters","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/return\/attributes","title":"var attributes: [Function.Return.Attribute]","type":"property"},{"path":"\/documentation\/llvm\/function\/return\/parent","title":"let parent: Function","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/return\/attribute","title":"Function.Return.Attribute","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/return\/attributename","title":"Function.Return.AttributeName","type":"typealias"}],"path":"\/documentation\/llvm\/function\/return\/attributeholder-implementations","title":"AttributeHolder Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/return\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/function\/return\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/function\/return","title":"Function.Return","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/init(_:)","title":"init?(IRValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/attributes","title":"var attributes: [Function.Attribute]","type":"property"},{"path":"\/documentation\/llvm\/function\/basicblocks","title":"var basicBlocks: [BasicBlock]","type":"property"},{"path":"\/documentation\/llvm\/function\/entry","title":"var entry: BasicBlock?","type":"property"},{"path":"\/documentation\/llvm\/function\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"path":"\/documentation\/llvm\/function\/parameters-swift.property","title":"var parameters: Function.Parameters","type":"property"},{"path":"\/documentation\/llvm\/function\/returnvalue","title":"var returnValue: Function.Return","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/iswellformed()","title":"func isWellFormed() -> Bool","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/attribute","title":"Function.Attribute","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/attributename\/alwaysinline","title":"case alwaysinline","type":"case"},{"path":"\/documentation\/llvm\/function\/attributename\/cold","title":"case cold","type":"case"},{"path":"\/documentation\/llvm\/function\/attributename\/hot","title":"case hot","type":"case"},{"path":"\/documentation\/llvm\/function\/attributename\/noinline","title":"case noinline","type":"case"},{"path":"\/documentation\/llvm\/function\/attributename\/norecurse","title":"case norecurse","type":"case"},{"path":"\/documentation\/llvm\/function\/attributename\/noreturn","title":"case noreturn","type":"case"},{"path":"\/documentation\/llvm\/function\/attributename\/nounwind","title":"case nounwind","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/attributename\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/attributename\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/function\/attributename\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/attributename\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/attributename\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/llvm\/function\/attributename\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/function\/attributename","title":"Function.AttributeName","type":"enum"}],"path":"\/documentation\/llvm\/function\/attributeholder-implementations","title":"AttributeHolder Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/function\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/!=(_:_:)-2xrjq","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/function\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/linkage","title":"var linkage: Linkage","type":"property"},{"path":"\/documentation\/llvm\/function\/valuetype","title":"var valueType: IRType","type":"property"}],"path":"\/documentation\/llvm\/function\/global-implementations","title":"Global Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/!=(_:_:)-75zg5","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/function\/!=(_:_:)-8lj9a","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/function\/==(_:_:)-31i7y","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/function\/==(_:_:)-6v56","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/function\/==(_:_:)-7cl02","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/function\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/function\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/function\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/function\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/function\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/function\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/function\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/function","title":"Function","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/functiontype\/init(_:)","title":"init?(IRType)","type":"init"},{"path":"\/documentation\/llvm\/functiontype\/init(from:to:in:)","title":"init(from: [IRType], to: IRType?, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/functiontype\/llvm","title":"let llvm: LLVMTypeRef","type":"property"},{"path":"\/documentation\/llvm\/functiontype\/parameters","title":"var parameters: [IRType]","type":"property"},{"path":"\/documentation\/llvm\/functiontype\/returntype","title":"var returnType: IRType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/functiontype\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/functiontype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/functiontype\/!=(_:_:)-9nqhd","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/functiontype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/functiontype\/!=(_:_:)-3kon0","title":"static func != (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/functiontype\/!=(_:_:)-4x6v5","title":"static func != (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/functiontype\/==(_:_:)-1hrmx","title":"static func == (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/functiontype\/==(_:_:)-43vn1","title":"static func == (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/functiontype\/==(_:_:)-9o432","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/functiontype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/functiontype\/issized","title":"var isSized: Bool","type":"property"},{"path":"\/documentation\/llvm\/functiontype\/null","title":"var null: IRValue","type":"property"}],"path":"\/documentation\/llvm\/functiontype\/irtype-implementations","title":"IRType Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/functiontype","title":"FunctionType","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/globalvariable\/initializer","title":"var initializer: IRValue?","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/isexternallyinitialized","title":"var isExternallyInitialized: Bool","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/isglobalconstant","title":"var isGlobalConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/globalvariable\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/globalvariable\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/globalvariable\/linkage","title":"var linkage: Linkage","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/valuetype","title":"var valueType: IRType","type":"property"}],"path":"\/documentation\/llvm\/globalvariable\/global-implementations","title":"Global Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/globalvariable\/!=(_:_:)-1x4wj","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/globalvariable\/!=(_:_:)-4flvs","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/globalvariable\/==(_:_:)-6u8j6","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/globalvariable\/==(_:_:)-9khhb","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/globalvariable\/==(_:_:)-k36z","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/globalvariable\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/globalvariable\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/globalvariable\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/globalvariable","title":"GlobalVariable","type":"struct"},{"path":"\/documentation\/llvm\/insertionpoint","title":"InsertionPoint","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/instruction\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/instruction\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/instruction\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/instruction\/!=(_:_:)-81lai","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/instruction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/instruction\/!=(_:_:)-39zpf","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/instruction\/!=(_:_:)-4wqba","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/instruction\/==(_:_:)-2txqy","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/instruction\/==(_:_:)-75htz","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/instruction\/==(_:_:)-o8ds","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/instruction\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/instruction\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/instruction\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/instruction\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/instruction\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/instruction\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/instruction\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/instruction","title":"Instruction","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerconstant\/init(_:)","title":"init?(IRValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerconstant\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"path":"\/documentation\/llvm\/integerconstant\/sext","title":"var sext: Int64","type":"property"},{"path":"\/documentation\/llvm\/integerconstant\/zext","title":"var zext: UInt64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerconstant\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/integerconstant\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerconstant\/!=(_:_:)-7k60l","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/integerconstant\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerconstant\/!=(_:_:)-24tta","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/integerconstant\/!=(_:_:)-7y290","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/integerconstant\/==(_:_:)-4ffop","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/integerconstant\/==(_:_:)-50hn9","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/integerconstant\/==(_:_:)-8zdyn","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerconstant\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/integerconstant\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/integerconstant\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/integerconstant\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/integerconstant\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/integerconstant\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/integerconstant\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/integerconstant","title":"IntegerConstant","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/integertype\/init(_:)","title":"init?(IRType)","type":"init"},{"path":"\/documentation\/llvm\/integertype\/init(_:in:)","title":"init(Int, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/integertype\/bitwidth","title":"var bitWidth: Int","type":"property"},{"path":"\/documentation\/llvm\/integertype\/llvm","title":"let llvm: LLVMTypeRef","type":"property"},{"path":"\/documentation\/llvm\/integertype\/zero","title":"var zero: IntegerConstant","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/integertype\/callasfunction(_:extendingsign:)","title":"func callAsFunction(UInt64, extendingSign: Bool) -> IntegerConstant","type":"method"},{"path":"\/documentation\/llvm\/integertype\/constant(_:extendingsign:)","title":"func constant(UInt64, extendingSign: Bool) -> IntegerConstant","type":"method"},{"path":"\/documentation\/llvm\/integertype\/constant(parsing:radix:)","title":"func constant(parsing: String, radix: Int) -> IntegerConstant","type":"method"},{"path":"\/documentation\/llvm\/integertype\/constant(truncatingifneeded:extendingsign:)","title":"func constant<T>(truncatingIfNeeded: T, extendingSign: Bool) -> IntegerConstant","type":"method"},{"path":"\/documentation\/llvm\/integertype\/constant(words:)","title":"func constant<Words>(words: Words) -> IntegerConstant","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/integertype\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/integertype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/integertype\/!=(_:_:)-290c7","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/integertype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/integertype\/!=(_:_:)-8e9jm","title":"static func != (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/integertype\/!=(_:_:)-9cfvg","title":"static func != (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/integertype\/==(_:_:)-4lz24","title":"static func == (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/integertype\/==(_:_:)-70zdc","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/integertype\/==(_:_:)-w3jb","title":"static func == (IRType, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/integertype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/integertype\/issized","title":"var isSized: Bool","type":"property"},{"path":"\/documentation\/llvm\/integertype\/null","title":"var null: IRValue","type":"property"}],"path":"\/documentation\/llvm\/integertype\/irtype-implementations","title":"IRType Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/integertype","title":"IntegerType","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/name-swift.struct\/value","title":"let value: String","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/name-swift.struct\/subscript(dynamicmember:)","title":"subscript(dynamicMember _: String) -> Intrinsic.Name","type":"subscript"}],"path":"\/documentation\/llvm\/intrinsic\/name-swift.struct","title":"Intrinsic.Name","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/identifier","title":"var identifier: UInt32","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/isoverloaded","title":"var isOverloaded: Bool","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/llvm-swift.property","title":"let llvm: LLVMValueRef","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/name-swift.property-4kp44","title":"var name: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/llvm-swift.type.property","title":"static var llvm: Intrinsic.Name","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/intrinsic\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/!=(_:_:)-2p9h0","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/intrinsic\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/linkage","title":"var linkage: Linkage","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/valuetype","title":"var valueType: IRType","type":"property"}],"path":"\/documentation\/llvm\/intrinsic\/global-implementations","title":"Global Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/!=(_:_:)-2j27m","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/intrinsic\/!=(_:_:)-853p6","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/intrinsic\/==(_:_:)-8u2zp","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/intrinsic\/==(_:_:)-9q4j5","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/intrinsic\/==(_:_:)-nrsu","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/intrinsic\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/name-swift.property-3ct2f","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/intrinsic\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/intrinsic\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/intrinsic","title":"Intrinsic","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/llvmerror\/description","title":"let description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/llvmerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/llvm\/llvmerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/llvmerror","title":"LLVMError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/memorybuffer\/init(contentsof:)","title":"init(contentsOf: String) throws","type":"init"},{"path":"\/documentation\/llvm\/memorybuffer\/init(copying:named:)","title":"init(copying: UnsafeBufferPointer<Int8>, named: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/memorybuffer\/count","title":"var count: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/memorybuffer\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>((UnsafeBufferPointer<Int8>) throws -> T) rethrows -> T","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/memorybuffer\/withinstanceborrowing(_:named:_:)","title":"static func withInstanceBorrowing<T>(UnsafeBufferPointer<Int8>, named: String, (MemoryBuffer) throws -> T) rethrows -> T","type":"method"}],"path":"\/documentation\/llvm\/memorybuffer","title":"MemoryBuffer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/module\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/module\/double","title":"var double: FloatingPointType","type":"property"},{"path":"\/documentation\/llvm\/module\/float","title":"var float: FloatingPointType","type":"property"},{"path":"\/documentation\/llvm\/module\/fp128","title":"var fp128: FloatingPointType","type":"property"},{"path":"\/documentation\/llvm\/module\/half","title":"var half: FloatingPointType","type":"property"},{"path":"\/documentation\/llvm\/module\/i1","title":"var i1: IntegerType","type":"property"},{"path":"\/documentation\/llvm\/module\/i128","title":"var i128: IntegerType","type":"property"},{"path":"\/documentation\/llvm\/module\/i16","title":"var i16: IntegerType","type":"property"},{"path":"\/documentation\/llvm\/module\/i32","title":"var i32: IntegerType","type":"property"},{"path":"\/documentation\/llvm\/module\/i64","title":"var i64: IntegerType","type":"property"},{"path":"\/documentation\/llvm\/module\/i8","title":"var i8: IntegerType","type":"property"},{"path":"\/documentation\/llvm\/module\/layout","title":"var layout: DataLayout","type":"property"},{"path":"\/documentation\/llvm\/module\/llvm","title":"var llvm: LLVMModuleRef","type":"property"},{"path":"\/documentation\/llvm\/module\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/module\/ptr","title":"var ptr: PointerType","type":"property"},{"path":"\/documentation\/llvm\/module\/target","title":"var target: Target?","type":"property"},{"path":"\/documentation\/llvm\/module\/void","title":"var void: VoidType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/module\/addattribute(_:to:)-30dzu","title":"func addAttribute(Function.Return.Attribute, to: Function.Return)","type":"method"},{"path":"\/documentation\/llvm\/module\/addattribute(_:to:)-3z9je","title":"func addAttribute(Function.Attribute, to: Function)","type":"method"},{"path":"\/documentation\/llvm\/module\/addattribute(_:to:)-43rlr","title":"func addAttribute(Parameter.Attribute, to: Parameter)","type":"method"},{"path":"\/documentation\/llvm\/module\/addattribute(named:to:)-6kjr2","title":"func addAttribute(named: Function.Return.AttributeName, to: Function.Return) -> Function.Return.Attribute","type":"method"},{"path":"\/documentation\/llvm\/module\/addattribute(named:to:)-93bbw","title":"func addAttribute(named: Function.AttributeName, to: Function) -> Function.Attribute","type":"method"},{"path":"\/documentation\/llvm\/module\/addattribute(named:to:)-sgts","title":"func addAttribute(named: Parameter.AttributeName, to: Parameter) -> Parameter.Attribute","type":"method"},{"path":"\/documentation\/llvm\/module\/addglobalvariable(_:_:inaddressspace:)","title":"func addGlobalVariable(String, IRType, inAddressSpace: AddressSpace) -> GlobalVariable","type":"method"},{"path":"\/documentation\/llvm\/module\/appendblock(named:to:)","title":"func appendBlock(named: String, to: Function) -> BasicBlock","type":"method"},{"path":"\/documentation\/llvm\/module\/before(_:)","title":"func before(Instruction) -> InsertionPoint","type":"method"},{"path":"\/documentation\/llvm\/module\/bitcode()","title":"func bitcode() -> MemoryBuffer","type":"method"},{"path":"\/documentation\/llvm\/module\/compile(_:for:)","title":"func compile(CodeGenerationResultType, for: TargetMachine) throws -> MemoryBuffer","type":"method"},{"path":"\/documentation\/llvm\/module\/declarefunction(_:_:)","title":"func declareFunction(String, FunctionType) -> Function","type":"method"},{"path":"\/documentation\/llvm\/module\/declareglobalvariable(_:_:inaddressspace:)","title":"func declareGlobalVariable(String, IRType, inAddressSpace: AddressSpace) -> GlobalVariable","type":"method"},{"path":"\/documentation\/llvm\/module\/endof(_:)","title":"func endOf(BasicBlock) -> InsertionPoint","type":"method"},{"path":"\/documentation\/llvm\/module\/function(named:)","title":"func function(named: String) -> Function?","type":"method"},{"path":"\/documentation\/llvm\/module\/global(named:)","title":"func global(named: String) -> GlobalVariable?","type":"method"},{"path":"\/documentation\/llvm\/module\/insertashr(_:_:at:)","title":"func insertAShr(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertadd(overflow:_:_:at:)","title":"func insertAdd(overflow: OverflowBehavior, IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertalloca(_:at:)","title":"func insertAlloca(IRType, at: InsertionPoint) -> Alloca","type":"method"},{"path":"\/documentation\/llvm\/module\/insertalloca(_:atentryof:)","title":"func insertAlloca(IRType, atEntryOf: Function) -> Alloca","type":"method"},{"path":"\/documentation\/llvm\/module\/insertbitwiseand(_:_:at:)","title":"func insertBitwiseAnd(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertbitwiseor(_:_:at:)","title":"func insertBitwiseOr(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertbitwisexor(_:_:at:)","title":"func insertBitwiseXor(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertbr(to:at:)","title":"func insertBr(to: BasicBlock, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertcall(_:on:at:)","title":"func insertCall(Function, on: [IRValue], at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertcall(_:typed:on:at:)","title":"func insertCall(IRValue, typed: IRType, on: [IRValue], at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertcondbr(if:then:else:at:)","title":"func insertCondBr(if: IRValue, then: BasicBlock, else: BasicBlock, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertextractvalue(from:at:at:)","title":"func insertExtractValue(from: IRValue, at: Int, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertfadd(_:_:at:)","title":"func insertFAdd(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertfdiv(_:_:at:)","title":"func insertFDiv(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertfmul(_:_:at:)","title":"func insertFMul(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertfpextend(_:to:at:)","title":"func insertFPExtend(IRValue, to: IRType, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertfptrunc(_:to:at:)","title":"func insertFPTrunc(IRValue, to: IRType, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertfrem(_:_:at:)","title":"func insertFRem(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertfsub(_:_:at:)","title":"func insertFSub(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertfloatingpointcomparison(_:_:_:at:)","title":"func insertFloatingPointComparison(FloatingPointPredicate, IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertgetelementpointer(of:typed:indices:at:)","title":"func insertGetElementPointer(of: IRValue, typed: IRType, indices: [IRValue], at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertgetelementpointerinbounds(of:typed:indices:at:)","title":"func insertGetElementPointerInBounds(of: IRValue, typed: IRType, indices: [IRValue], at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertgetstructelementpointer(of:typed:index:at:)","title":"func insertGetStructElementPointer(of: IRValue, typed: StructType, index: Int, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertinsertvalue(_:at:into:at:)","title":"func insertInsertValue(IRValue, at: Int, into: IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertinttoptr(_:to:at:)","title":"func insertIntToPtr(IRValue, to: IRType?, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertintegercomparison(_:_:_:at:)","title":"func insertIntegerComparison(IntegerPredicate, IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertlshr(_:_:at:)","title":"func insertLShr(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertload(_:from:at:)","title":"func insertLoad(IRType, from: IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertmul(overflow:_:_:at:)","title":"func insertMul(overflow: OverflowBehavior, IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertptrtoint(_:to:at:)","title":"func insertPtrToInt(IRValue, to: IRType, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertreturn(_:at:)","title":"func insertReturn(IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertreturn(at:)","title":"func insertReturn(at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertshl(_:_:at:)","title":"func insertShl(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertsignextend(_:to:at:)","title":"func insertSignExtend(IRValue, to: IRType, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertsigneddiv(exact:_:_:at:)","title":"func insertSignedDiv(exact: Bool, IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertsignedrem(_:_:at:)","title":"func insertSignedRem(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertstore(_:to:at:)","title":"func insertStore(IRValue, to: IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertsub(overflow:_:_:at:)","title":"func insertSub(overflow: OverflowBehavior, IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertswitch(on:cases:default:at:)","title":"func insertSwitch<C>(on: IRValue, cases: C, default: BasicBlock, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/inserttrunc(_:to:at:)","title":"func insertTrunc(IRValue, to: IRType, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertunreachable(at:)","title":"func insertUnreachable(at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertunsigneddiv(exact:_:_:at:)","title":"func insertUnsignedDiv(exact: Bool, IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertunsignedrem(_:_:at:)","title":"func insertUnsignedRem(IRValue, IRValue, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/insertzeroextend(_:to:at:)","title":"func insertZeroExtend(IRValue, to: IRType, at: InsertionPoint) -> Instruction","type":"method"},{"path":"\/documentation\/llvm\/module\/intrinsic(named:for:)-1f7tm","title":"func intrinsic(named: String, for: [IRType]) -> Intrinsic?","type":"method"},{"path":"\/documentation\/llvm\/module\/intrinsic(named:for:)-grw5","title":"func intrinsic(named: Intrinsic.Name, for: [IRType]) -> Intrinsic?","type":"method"},{"path":"\/documentation\/llvm\/module\/removeattribute(_:from:)-4ts8i","title":"func removeAttribute(Parameter.Attribute, from: Parameter)","type":"method"},{"path":"\/documentation\/llvm\/module\/removeattribute(_:from:)-4vdph","title":"func removeAttribute(Function.Attribute, from: Function)","type":"method"},{"path":"\/documentation\/llvm\/module\/removeattribute(_:from:)-srqi","title":"func removeAttribute(Function.Return.Attribute, from: Function.Return)","type":"method"},{"path":"\/documentation\/llvm\/module\/rundefaultmodulepasses(optimization:for:)","title":"func runDefaultModulePasses(optimization: OptimitzationLevel, for: TargetMachine?)","type":"method"},{"path":"\/documentation\/llvm\/module\/setalignment(_:for:)","title":"func setAlignment(Int, for: Alloca)","type":"method"},{"path":"\/documentation\/llvm\/module\/setexternallyinitialized(_:for:)","title":"func setExternallyInitialized(Bool, for: GlobalVariable)","type":"method"},{"path":"\/documentation\/llvm\/module\/setglobalconstant(_:for:)","title":"func setGlobalConstant(Bool, for: GlobalVariable)","type":"method"},{"path":"\/documentation\/llvm\/module\/setinitializer(_:for:)","title":"func setInitializer(IRValue?, for: GlobalVariable)","type":"method"},{"path":"\/documentation\/llvm\/module\/setlinkage(_:for:)","title":"func setLinkage(Linkage, for: Global)","type":"method"},{"path":"\/documentation\/llvm\/module\/setname(_:for:)","title":"func setName(String, for: IRValue)","type":"method"},{"path":"\/documentation\/llvm\/module\/startof(_:)","title":"func startOf(BasicBlock) -> InsertionPoint","type":"method"},{"path":"\/documentation\/llvm\/module\/type(named:)","title":"func type(named: String) -> IRType?","type":"method"},{"path":"\/documentation\/llvm\/module\/verify()","title":"func verify() throws","type":"method"},{"path":"\/documentation\/llvm\/module\/write(_:for:to:)","title":"func write(CodeGenerationResultType, for: TargetMachine, to: String) throws","type":"method"},{"path":"\/documentation\/llvm\/module\/writebitcode(to:)","title":"func writeBitcode(to: String) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/module\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/module\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/module\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/module","title":"Module","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/init(_:)","title":"init?(IRValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/attributes","title":"var attributes: [Parameter.Attribute]","type":"property"},{"path":"\/documentation\/llvm\/parameter\/index","title":"let index: Int","type":"property"},{"path":"\/documentation\/llvm\/parameter\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"path":"\/documentation\/llvm\/parameter\/parent","title":"var parent: Function","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/attribute","title":"Parameter.Attribute","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/attributename\/align","title":"case align","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/alignstack","title":"case alignstack","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/allocalign","title":"case allocalign","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/allocptr","title":"case allocptr","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/dereferenceable","title":"case dereferenceable","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/dereferenceable_or_null","title":"case dereferenceable_or_null","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/immarg","title":"case immarg","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/inreg","title":"case inreg","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/noalias","title":"case noalias","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/nocapture","title":"case nocapture","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/nofree","title":"case nofree","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/nonnull","title":"case nonnull","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/noundef","title":"case noundef","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/readnone","title":"case readnone","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/readonly","title":"case readonly","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/returned","title":"case returned","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/signext","title":"case signext","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/writeonly","title":"case writeonly","type":"case"},{"path":"\/documentation\/llvm\/parameter\/attributename\/zeroext","title":"case zeroext","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/attributename\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/attributename\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/parameter\/attributename\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/attributename\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/attributename\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/llvm\/parameter\/attributename\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/parameter\/attributename","title":"Parameter.AttributeName","type":"enum"}],"path":"\/documentation\/llvm\/parameter\/attributeholder-implementations","title":"AttributeHolder Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/parameter\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/!=(_:_:)-3szom","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/parameter\/==(_:_:)-4h44p","title":"static func == (Parameter, Parameter) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/parameter\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/llvm\/parameter\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/!=(_:_:)-5v7ag","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/parameter\/!=(_:_:)-7qpb5","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/parameter\/==(_:_:)-5bl3w","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/parameter\/==(_:_:)-98zv9","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/parameter\/==(_:_:)-mx6l","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/parameter\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/parameter\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/parameter\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/parameter\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/parameter\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/parameter\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/parameter\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/parameter","title":"Parameter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/pointertype\/init(_:)","title":"init?(IRType)","type":"init"},{"path":"\/documentation\/llvm\/pointertype\/init(inaddressspace:in:)","title":"init(inAddressSpace: AddressSpace, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/pointertype\/addressspace","title":"var addressSpace: AddressSpace","type":"property"},{"path":"\/documentation\/llvm\/pointertype\/llvm","title":"let llvm: LLVMTypeRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/pointertype\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/pointertype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/pointertype\/!=(_:_:)-boud","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/pointertype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/pointertype\/!=(_:_:)-4pawp","title":"static func != (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/pointertype\/!=(_:_:)-6w1t4","title":"static func != (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/pointertype\/==(_:_:)-19w7f","title":"static func == (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/pointertype\/==(_:_:)-45cjn","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/pointertype\/==(_:_:)-8dv72","title":"static func == (Self, IRType) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/pointertype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/pointertype\/issized","title":"var isSized: Bool","type":"property"},{"path":"\/documentation\/llvm\/pointertype\/null","title":"var null: IRValue","type":"property"}],"path":"\/documentation\/llvm\/pointertype\/irtype-implementations","title":"IRType Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/pointertype","title":"PointerType","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/poison\/init(_:)","title":"init?(IRValue)","type":"init"},{"path":"\/documentation\/llvm\/poison\/init(of:)","title":"init(of: IRType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/poison\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/poison\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/poison\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/poison\/!=(_:_:)-2aoee","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/poison\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/poison\/!=(_:_:)-1fcod","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/poison\/!=(_:_:)-1h4xq","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/poison\/==(_:_:)-5c9cu","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/poison\/==(_:_:)-64g3x","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/poison\/==(_:_:)-9m7q1","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/poison\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/poison\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/poison\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/poison\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/poison\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/poison\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/poison\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/poison","title":"Poison","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/stringconstant\/init(_:)","title":"init?(IRValue)","type":"init"},{"path":"\/documentation\/llvm\/stringconstant\/init(_:nullterminated:in:)","title":"init(String, nullTerminated: Bool, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/stringconstant\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"path":"\/documentation\/llvm\/stringconstant\/value","title":"var value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/stringconstant\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/stringconstant\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/stringconstant\/!=(_:_:)-ao8p","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/stringconstant\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/stringconstant\/!=(_:_:)-3l65b","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/stringconstant\/!=(_:_:)-4orqr","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/stringconstant\/==(_:_:)-3us6g","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/stringconstant\/==(_:_:)-51s4t","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/stringconstant\/==(_:_:)-9da5h","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/stringconstant\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/stringconstant\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/stringconstant\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/stringconstant\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/stringconstant\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/stringconstant\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/stringconstant\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/stringconstant","title":"StringConstant","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/init(aggregating:packed:in:)","title":"init<S>(aggregating: S, packed: Bool, in: inout Module)","type":"init"},{"path":"\/documentation\/llvm\/structconstant\/init(of:aggregating:in:)","title":"init<S>(of: StructType, aggregating: S, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/count-1utn9","title":"let count: Int","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/subscript(_:)-5iast","title":"subscript(Int) -> IRValue","type":"subscript"}],"path":"\/documentation\/llvm\/structconstant\/aggregateconstant-implementations","title":"AggregateConstant Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/flatmapoffsets(_:)","title":"func flatmapOffsets(Offsets?) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/mapoffsets(_:)","title":"func mapOffsets(Offsets) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/llvm\/structconstant\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/count-mzaj","title":"var count: Int","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/underestimatedcount-35586","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/convertbyoffset(_:in:)-4eejk","title":"func convertByOffset<C>(Range<Self.Index>, in: C) -> Range<C.Index>","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/convertbyoffset(_:in:)-90r42","title":"func convertByOffset<C>(Self.Index, in: C) -> C.Index","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/index(atoffset:)","title":"func index(atOffset: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/map(_:)-96a4c","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/offset(of:)","title":"func offset(of: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/offset(ofindex:)","title":"func offset(ofIndex: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/offsets(of:)","title":"func offsets(of: Range<Self.Index>) -> Range<Int>","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/split(around:)","title":"func split(around: Range<Self.Index>) -> (prefix: Self.SubSequence, Self.SubSequence, suffix: Self.SubSequence)","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/subscript(_:)-1cp28","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/llvm\/structconstant\/subscript(_:)-453pp","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/llvm\/structconstant\/subscript(_:)-979v5","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/index","title":"StructConstant.Index","type":"typealias"}],"path":"\/documentation\/llvm\/structconstant\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/structconstant\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/!=(_:_:)-7agfx","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/structconstant\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/!=(_:_:)-1k125","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/structconstant\/!=(_:_:)-5x5mk","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/structconstant\/==(_:_:)-5t2ag","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/structconstant\/==(_:_:)-93t4x","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/structconstant\/==(_:_:)-97vrs","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/structconstant\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/llvm\/structconstant\/underestimatedcount-ph1i","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/all(_:)","title":"func all((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/any(_:)","title":"func any((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/flatmap(_:)-3v6m6","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/flatmap(_:)-3vgft","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/map(_:)-9aip3","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/none(_:)","title":"func none((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/sorted(using:)-7tue9","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/sorted(using:)-9p6hw","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structconstant\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/structconstant\/element","title":"StructConstant.Element","type":"typealias"}],"path":"\/documentation\/llvm\/structconstant\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/structconstant","title":"StructConstant","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/count-39dn8","title":"var count: Int","type":"property"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/subscript(_:)-4dafq","title":"subscript(Int) -> IRType","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/element","title":"StructType.Fields.Element","type":"typealias"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/index","title":"StructType.Fields.Index","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/flatmapoffsets(_:)","title":"func flatmapOffsets(Offsets?) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/mapoffsets(_:)","title":"func mapOffsets(Offsets) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/count-5yp0r","title":"var count: Int","type":"property"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/underestimatedcount-92p3s","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/convertbyoffset(_:in:)-88e2n","title":"func convertByOffset<C>(Self.Index, in: C) -> C.Index","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/convertbyoffset(_:in:)-96wns","title":"func convertByOffset<C>(Range<Self.Index>, in: C) -> Range<C.Index>","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/index(atoffset:)","title":"func index(atOffset: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/map(_:)-8eo41","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/offset(of:)","title":"func offset(of: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/offset(ofindex:)","title":"func offset(ofIndex: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/offsets(of:)","title":"func offsets(of: Range<Self.Index>) -> Range<Int>","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/split(around:)","title":"func split(around: Range<Self.Index>) -> (prefix: Self.SubSequence, Self.SubSequence, suffix: Self.SubSequence)","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/subscript(_:)-7e3hp","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/subscript(_:)-8ktuv","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/subscript(_:)-s3gj","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/underestimatedcount-3heb","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/all(_:)","title":"func all((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/any(_:)","title":"func any((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/flatmap(_:)-1fr0k","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/flatmap(_:)-570oz","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/map(_:)-4mf5y","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/none(_:)","title":"func none((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/sorted(using:)-3f75y","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/sorted(using:)-3jg6","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/llvm\/structtype\/fields-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/structtype\/fields-swift.struct","title":"StructType.Fields","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/init(_:)","title":"init?(IRType)","type":"init"},{"path":"\/documentation\/llvm\/structtype\/init(_:packed:in:)","title":"init([IRType], packed: Bool, in: inout Module)","type":"init"},{"path":"\/documentation\/llvm\/structtype\/init(named:_:packed:in:)","title":"init(named: String, [IRType], packed: Bool, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/fields-swift.property","title":"var fields: StructType.Fields","type":"property"},{"path":"\/documentation\/llvm\/structtype\/isliteral","title":"var isLiteral: Bool","type":"property"},{"path":"\/documentation\/llvm\/structtype\/isopaque","title":"var isOpaque: Bool","type":"property"},{"path":"\/documentation\/llvm\/structtype\/ispacked","title":"var isPacked: Bool","type":"property"},{"path":"\/documentation\/llvm\/structtype\/llvm","title":"let llvm: LLVMTypeRef","type":"property"},{"path":"\/documentation\/llvm\/structtype\/name","title":"var name: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/constant(aggregating:in:)","title":"func constant<S>(aggregating: S, in: inout Module) -> StructConstant","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/structtype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/!=(_:_:)-6jrmx","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/structtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/!=(_:_:)-6kn99","title":"static func != (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/structtype\/!=(_:_:)-8vl69","title":"static func != (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/structtype\/==(_:_:)-4cxfx","title":"static func == (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/structtype\/==(_:_:)-4niim","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/structtype\/==(_:_:)-87hj5","title":"static func == (Self, IRType) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/structtype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/structtype\/issized","title":"var isSized: Bool","type":"property"},{"path":"\/documentation\/llvm\/structtype\/null","title":"var null: IRValue","type":"property"}],"path":"\/documentation\/llvm\/structtype\/irtype-implementations","title":"IRType Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/structtype","title":"StructType","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/target\/init(of:)","title":"init(of: TargetMachine)","type":"init"},{"path":"\/documentation\/llvm\/target\/init(triple:)","title":"init(triple: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/target\/hasassemblybackend","title":"var hasAssemblyBackEnd: Bool","type":"property"},{"path":"\/documentation\/llvm\/target\/hasjit","title":"var hasJIT: Bool","type":"property"},{"path":"\/documentation\/llvm\/target\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/target\/triple","title":"let triple: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/target\/host()","title":"static func host() throws -> Target","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/target\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/target\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/target\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/target\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/target\/==(_:_:)","title":"static func == (Target, Target) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/target\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/target\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/llvm\/target\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/target","title":"Target","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/targetmachine\/init(for:cpu:features:optimization:relocation:code:)","title":"init(for: Target, cpu: String, features: String, optimization: OptimitzationLevel, relocation: RelocationModel, code: CodeModel)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/targetmachine\/cpu","title":"var cpu: String","type":"property"},{"path":"\/documentation\/llvm\/targetmachine\/features","title":"var features: String","type":"property"},{"path":"\/documentation\/llvm\/targetmachine\/layout","title":"var layout: DataLayout","type":"property"},{"path":"\/documentation\/llvm\/targetmachine\/target","title":"var target: Target","type":"property"},{"path":"\/documentation\/llvm\/targetmachine\/triple","title":"var triple: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/targetmachine\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/targetmachine\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/targetmachine\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/targetmachine","title":"TargetMachine","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/undefined\/init(_:)","title":"init?(IRValue)","type":"init"},{"path":"\/documentation\/llvm\/undefined\/init(of:)","title":"init(of: IRType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/undefined\/llvm","title":"let llvm: LLVMValueRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/undefined\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/undefined\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/undefined\/!=(_:_:)-3121z","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/undefined\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/undefined\/!=(_:_:)-30u9z","title":"static func != (Self, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/undefined\/!=(_:_:)-8a3ti","title":"static func != (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/undefined\/==(_:_:)-31vrc","title":"static func == (IRValue, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/undefined\/==(_:_:)-3keu8","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/undefined\/==(_:_:)-9lmlz","title":"static func == (Self, IRValue) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/undefined\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/undefined\/isconstant","title":"var isConstant: Bool","type":"property"},{"path":"\/documentation\/llvm\/undefined\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/llvm\/undefined\/isterminator","title":"var isTerminator: Bool","type":"property"},{"path":"\/documentation\/llvm\/undefined\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/llvm\/undefined\/type","title":"var type: IRType","type":"property"}],"path":"\/documentation\/llvm\/undefined\/irvalue-implementations","title":"IRValue Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/undefined","title":"Undefined","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/voidtype\/init(_:)","title":"init?(IRType)","type":"init"},{"path":"\/documentation\/llvm\/voidtype\/init(in:)","title":"init(in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/voidtype\/llvm","title":"let llvm: LLVMTypeRef","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/voidtype\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/voidtype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/voidtype\/!=(_:_:)-81t4x","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/voidtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/voidtype\/!=(_:_:)-2gati","title":"static func != (IRType, Self) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/voidtype\/!=(_:_:)-63jor","title":"static func != (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/voidtype\/==(_:_:)-2wvf0","title":"static func == <R>(Self, R) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/voidtype\/==(_:_:)-6aqe8","title":"static func == (Self, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/voidtype\/==(_:_:)-9eert","title":"static func == (IRType, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/voidtype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/voidtype\/issized","title":"var isSized: Bool","type":"property"},{"path":"\/documentation\/llvm\/voidtype\/null","title":"var null: IRValue","type":"property"}],"path":"\/documentation\/llvm\/voidtype\/irtype-implementations","title":"IRType Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/voidtype","title":"VoidType","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/!=(_:_:)-4dmu5","title":"func != (IRValue, IRValue) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/!=(_:_:)-9z9qt","title":"func != (IRType, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/==(_:_:)-6k75s","title":"func == (IRType, IRType) -> Bool","type":"op"},{"path":"\/documentation\/llvm\/==(_:_:)-9hkvj","title":"func == (IRValue, IRValue) -> Bool","type":"op"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/attribute\/targetindependent(llvm:)","title":"case targetIndependent(llvm: LLVMAttributeRef)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/attribute\/init(_:_:in:)","title":"init(T.AttributeName, UInt64, in: inout Module)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/attribute\/value","title":"var value: UInt64?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/attribute\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/attribute\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/attribute","title":"Attribute","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/codegenerationresulttype\/assembly","title":"case assembly","type":"case"},{"path":"\/documentation\/llvm\/codegenerationresulttype\/objectfile","title":"case objectFile","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/codegenerationresulttype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/codegenerationresulttype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/codegenerationresulttype","title":"CodeGenerationResultType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/codemodel\/default","title":"case `default`","type":"case"},{"path":"\/documentation\/llvm\/codemodel\/jit","title":"case jit","type":"case"},{"path":"\/documentation\/llvm\/codemodel\/kernel","title":"case kernel","type":"case"},{"path":"\/documentation\/llvm\/codemodel\/large","title":"case large","type":"case"},{"path":"\/documentation\/llvm\/codemodel\/medium","title":"case medium","type":"case"},{"path":"\/documentation\/llvm\/codemodel\/small","title":"case small","type":"case"},{"path":"\/documentation\/llvm\/codemodel\/tiny","title":"case tiny","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/codemodel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/codemodel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/codemodel","title":"CodeModel","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/alwaysfalse","title":"case alwaysFalse","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/alwaystrue","title":"case alwaysTrue","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/oeq","title":"case oeq","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/oge","title":"case oge","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/ogt","title":"case ogt","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/ole","title":"case ole","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/olt","title":"case olt","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/one","title":"case one","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/ord","title":"case ord","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/ueq","title":"case ueq","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/uge","title":"case uge","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/ugt","title":"case ugt","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/ule","title":"case ule","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/ult","title":"case ult","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/une","title":"case une","type":"case"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/uno","title":"case uno","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/floatingpointpredicate\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/floatingpointpredicate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/init(_:)","title":"init?(String)","type":"init"}],"path":"\/documentation\/llvm\/floatingpointpredicate\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/floatingpointpredicate\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/llvm\/floatingpointpredicate\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/floatingpointpredicate","title":"FloatingPointPredicate","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerpredicate\/eq","title":"case eq","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/ne","title":"case ne","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/sge","title":"case sge","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/sgt","title":"case sgt","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/sle","title":"case sle","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/slt","title":"case slt","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/uge","title":"case uge","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/ugt","title":"case ugt","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/ule","title":"case ule","type":"case"},{"path":"\/documentation\/llvm\/integerpredicate\/ult","title":"case ult","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerpredicate\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerpredicate\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/llvm\/integerpredicate\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/llvm\/integerpredicate\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerpredicate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/integerpredicate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerpredicate\/init(_:)","title":"init?(String)","type":"init"}],"path":"\/documentation\/llvm\/integerpredicate\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerpredicate\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/llvm\/integerpredicate\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/llvm\/integerpredicate\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/integerpredicate","title":"IntegerPredicate","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/linkage\/appending","title":"case appending","type":"case"},{"path":"\/documentation\/llvm\/linkage\/availableexternally","title":"case availableExternally","type":"case"},{"path":"\/documentation\/llvm\/linkage\/externweak","title":"case externWeak","type":"case"},{"path":"\/documentation\/llvm\/linkage\/external","title":"case external","type":"case"},{"path":"\/documentation\/llvm\/linkage\/internal","title":"case `internal`","type":"case"},{"path":"\/documentation\/llvm\/linkage\/linkonce","title":"case linkOnce","type":"case"},{"path":"\/documentation\/llvm\/linkage\/linkonceodr","title":"case linkOnceODR","type":"case"},{"path":"\/documentation\/llvm\/linkage\/private","title":"case `private`","type":"case"},{"path":"\/documentation\/llvm\/linkage\/weak","title":"case weak","type":"case"},{"path":"\/documentation\/llvm\/linkage\/weakodr","title":"case weakODR","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/linkage\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/linkage\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/linkage","title":"Linkage","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/optimitzationlevel\/aggressive","title":"case aggressive","type":"case"},{"path":"\/documentation\/llvm\/optimitzationlevel\/default","title":"case `default`","type":"case"},{"path":"\/documentation\/llvm\/optimitzationlevel\/less","title":"case less","type":"case"},{"path":"\/documentation\/llvm\/optimitzationlevel\/none","title":"case none","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/optimitzationlevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/optimitzationlevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/optimitzationlevel","title":"OptimitzationLevel","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/overflowbehavior\/ignore","title":"case ignore","type":"case"},{"path":"\/documentation\/llvm\/overflowbehavior\/nsw","title":"case nsw","type":"case"},{"path":"\/documentation\/llvm\/overflowbehavior\/nuw","title":"case nuw","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/overflowbehavior\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/overflowbehavior\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/overflowbehavior","title":"OverflowBehavior","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/llvm\/relocationmodel\/default","title":"case `default`","type":"case"},{"path":"\/documentation\/llvm\/relocationmodel\/pic","title":"case pic","type":"case"},{"path":"\/documentation\/llvm\/relocationmodel\/static","title":"case `static`","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/llvm\/relocationmodel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/llvm\/relocationmodel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/llvm\/relocationmodel","title":"RelocationModel","type":"enum"}],"path":"\/documentation\/llvm","title":"LLVM","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}