view ExpressibleByBuiltinIntLiteral {

  new (literal: consuming Builtin::IntLiteral)

}

/// A signed integer value.
type Int: ExpressibleByBuiltinIntLiteral {

  /// the wrapped built-in integer value.
  var value: Builtin::i64

  /// Creates a new value equal to zero.
  new () {
    self = 0
  }

  /// Creates a new value from a built-in literal.
  ///
  /// This constructor is meant to be used internally and should not be called directly.
  new (literal value: consuming Builtin::IntLiteral) {
    self.value = Builtin::i64_trunc_IntLiteral(value)
  }

  /// Creates a new value from a built-in integer.
  new (_ value: consuming Builtin::i64) {
    self.value = value
  }

  /// Returns the result of adding `other` to this value.
  ///
  /// - Parameter other: An integer value.
  fun + (_ other: Int) -> Int {
    var result = Int()
    result.value = Builtin::i64_add(self.value, other.value)
    ret result
  }

  /// Returns the result of subtracting `other` from this value.
  ///
  /// - Parameter other: An integer value.
  fun - (_ other: Int) -> Int {
    var result = Int()
    result.value = Builtin::i64_sub(self.value, other.value)
    ret result
  }

  /// Returns the result of multiplying `other` with this value.
  ///
  /// - Parameter other: An integer value.
  fun * (_ other: Int) -> Int {
    var result = Int()
    result.value = Builtin::i64_mul(self.value, other.value)
    ret result
  }

  /// Returns the result of dividing this value by `other`.
  ///
  /// - Parameter other: An integer value.
  fun / (_ other: Int) -> Int {
    var result = Int()
    result.value = Builtin::i64_div(self.value, other.value)
    ret result
  }

  /// Returns the remainder of dividing this value by `other`.
  ///
  /// - Parameter other: An integer value.
  fun % (_ other: Int) -> Int {
    var result = Int()
    result.value = Builtin::i64_rem(self.value, other.value)
    ret result
  }

  /// Negates this value, effectively producing the same value with the opposite sign.
  prefix mut fun negate() {
    self = 0 - self
  }

}

extn Int: Copyable {

  fun copy() -> Int {
    var result = Int()
    result.value = self.value
    ret result
  }

}
