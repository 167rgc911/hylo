/// A type whose instances' values have a standard total ordering
///
/// `<` is a total ordering; `a == b` implies that `a < b` and `b < a` are both false.
public trait Comparable: Equatable {

  /// Returns `true` iff `self` is ordered before `other`.
  fun infix< (_ other: Self) -> Bool

}

extension Comparable {

  /// Returns `true` iff `self` is ordered after `other`.
  fun infix> (_ other: Self) -> Bool { (other < self) }

  /// Returns `false` iff `self` is ordered after `other`.
  fun infix<= (_ other: Self) -> Bool { !(other < self) }

  /// Returns `false` iff `self` is ordered before `other`.
  fun infix>= (_ other: Self) -> Bool { !(self < other) }

}

/// Returns the lesser of `x` and `y`.
public subscript min<T: Comparable>(_ x: T, _ y: T): T {
  if y < x { yield y } else { yield x }
}

/// Returns the greater of `x` and `y`.
public subscript max<T: Comparable>(_ x: T, _ y: T): T {
  if x < y { yield y } else { yield x }
}
