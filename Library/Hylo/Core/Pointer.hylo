/// A typed memory address whose contents can be read.
public type Pointer<Pointee>: Regular {

  /// The raw bits of the address.
  var base: Builtin.ptr

  memberwise init

  /// The value at the given address.
  ///
  /// - Requires: the address stores an object of type Pointee and nothing modifies
  ///   that storage during the lifetime of this projection.
  public subscript unsafe(): Pointee {
    yield base as* (remote let Pointee)
  }

  /// Creates an instance referring to the same address as `p`.
  public init(_ p: PointerToMutable<Pointee>) {
    &base = p.base
  }

  /// Creates an instance referring to the same address as `p`.
  ///
  /// Note that dereferencing type punned pointers will cause problems unless the rules for the
  /// `usafe[]` subscript (which see) are followed.
  public init<Other>(type_punning p: Pointer<Other>) {
    &base = p.base
  }

  /// Creates an instance that does not address any usable storage.
  public static fun null() -> Self {
    .new(base: Builtin.zeroinitializer_ptr())
  }

}

public conformance Pointer: Copyable {

  public fun copy() -> Self {
    Pointer(base: base)
  }

}

public conformance Pointer: Equatable {

  /// Returns `true` iff `other` has an equivalent value.
  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_word(Builtin.ptrtoint_word(base), Builtin.ptrtoint_word(other.base)))
  }

}

/// The address of `x`.
public subscript pointer<T>(to x: T): Pointer<T> {
  let { yield Pointer(base: Builtin.address(of: x)) }
}


public conformance Pointer: ForeignConvertible {

  public typealias ForeignRepresentation = Builtin.ptr

  public init(foreign_value: sink Builtin.ptr) {
    &self.base = foreign_value
  }

  public fun foreign_value() -> Builtin.ptr {
    base
  }

}
