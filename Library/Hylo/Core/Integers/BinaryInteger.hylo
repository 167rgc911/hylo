/// An integer type with a binary representation.
public trait BinaryInteger {

  /// Creates an instance with value `0`.
  init()

  // TODO: Rename to `bit_width` when #1041 is fixed.
  /// Returns the number of bits in the representation of `self`.
  fun instance_bit_width() -> Int

  /// Returns `-1` if `self` is negative, `1` if it is positive, or `0` otherwise.
  fun signum() -> Int

  /// Returns the number of bits equal to `1` in the representation of `self`.
  fun nonzero_bit_count() -> Int

  /// Returns the number of bits equal to `0` on the left of the most significant bit equal to
  /// `1` in the representation of `self`.
  fun leading_zeros() -> Int

  /// Returns the number of bits equal to `0` on the right of the least significant bit equal to
  /// `1` in the representation of `self`.
  fun trailing_zeros() -> Int

  // TODO: Define an associated type when #1042 is fixed.
  /// Returns the words of in the representation of `self`, from the least to most significant.
  ///
  /// If `self.instance_bit_width()` is smaller than `UInt.bit_width()`, the returned collection
  /// contains a single word obtained by sign-extending the representation of `self`.
  fun words() -> CollectionOfOne<UInt>

  /// Returns `true` if this type is a signed integer.
  static fun is_signed() -> Bool

}
