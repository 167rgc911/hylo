/// An unsigned integer value.
public type UInt {

  var value: Builtin.word

  memberwise init

  /// Creates an instance with value `0`.
  public init() {
    &self.value = Builtin.zeroinitializer_word()
  }

  /// Creates an instance with the same memory representation as `other`.
  public init(bit_pattern other: Int) {
    &self.value = other.value
  }

  /// Creates an instance with the same memory representation as `address`.
  public init(bit_pattern address: MemoryAddress) {
    &self.value = Builtin.ptrtoint_word(address.base)
  }

  /// Returns `true` if `self` is equal to `other`. Otherwise, returns `false`.
  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_word(value, other.value))
  }

  /// Returns `true` if `self` is not equal to `other`. Otherwise, returns `false`.
  public fun infix!= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ne_word(value, other.value))
  }

  /// Returns the bitwise AND of `self` and `other`.
  public fun infix& (_ other: Self) -> Self {
    UInt(value: Builtin.and_word(value, other.value))
  }

  /// Writes the bitwise AND of `self` and `other` to `self`.
  public fun infix&= (_ other: Self) inout {
    &self.value = Builtin.and_word(value, other.value)
  }

  /// Returns the bitwise OR of `self` and `other`.
  public fun infix| (_ other: Self) -> Self {
    UInt(value: Builtin.or_word(value, other.value))
  }

  /// Writes the bitwise OR of `self` and `other` to `self`.
  public fun infix|= (_ other: Self) inout {
    &self.value = Builtin.or_word(value, other.value)
  }

  /// Returns the bitwise XOR of `self` and `other`.
  public fun infix^ (_ other: Self) -> Self {
    UInt(value: Builtin.xor_word(value, other.value))
  }

  /// Writes the bitwise XOR of `self` and `other` to `self`.
  public fun infix^= (_ other: Self) inout {
    &self.value = Builtin.xor_word(value, other.value)
  }

  /// Returns the bitwise inverse of `self`.
  public fun prefix~ () -> Self {
    self ^ UInt(bit_pattern: -1)
  }

}

public conformance UInt: ExpressibleByIntegerLiteral {}

public conformance UInt: Deinitializable {}

public conformance UInt: Copyable {

  public fun copy() -> Self {
    UInt(value: value)
  }

}
