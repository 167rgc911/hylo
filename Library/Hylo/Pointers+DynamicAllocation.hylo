public extension PointerToMutable where Pointee == Never {

  /// Allocates memory for `count` bytes at given `alignment`.
  public static fun allocate_bytes(count: Int, aligned_at alignment: Int) -> Self {
    .new(type_punning: aligned_alloc(alignment, count))
  }

}

public extension PointerToMutable {

  /// Allocates memory for `count` instances of `Pointee`.
  public static fun allocate(count: Int) -> Self {
    .new(type_punning: aligned_alloc(MemoryLayout<Pointee>.alignment(), MemoryLayout<Pointee>.stride() * count))
  }

  /// Deallocates the memory previously allocated at `self`.
  public fun deallocate() {
    free(PointerToMutable<Never>(self))
  }

}
