public extension MutableRawPointer {

  /// Allocates memory for `count` bytes at given `alignment`.
  public static fun allocate(count: Int, aligned_at alignment: Int) -> Self {
    .new(mutating: aligned_alloc(alignment, count))
  }

  /// Deallocates the memory previously allocated at `self`.
  public fun deallocate() {
    free(RawPointer(self))
  }

}

public extension MutablePointer {

  /// Allocates memory for `count` instances of `Pointee`.
  public static fun allocate(count: Int) -> Self {
    .new(MutableRawPointer.allocate(
      count: MemoryLayout<Pointee>.stride(),
      aligned_at: MemoryLayout<Pointee>.alignment()))
  }

  /// Deallocates the memory previously allocated at `self`.
  public fun deallocate() {
    free(RawPointer(self))
  }

}
